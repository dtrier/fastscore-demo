"# fastscore.schema.0: double\n# fastscore.schema.2: double\n# fastscore.slot.1: unused\n# fastscore.module-attached: streamstats\n# fastscore.module-attached: influxdb\n\n\nfrom streamstats import *\nimport sys\nimport datetime as dt\nfrom influxdb import InfluxDBClient\nfrom time import sleep\n\ndef vals_to_dict(sb):\n\tvals = sb.values\n\tmean, var = vals[\"Moments\"]\n\tvals[\"Mean\"] = mean\n\tvals[\"Variance\"] = var\n\tdel vals[\"Moments\"]\n\tewma, ewmv = vals[\"EWM\"]\n\tvals[\"EWMA\"] = ewma\n\tvals[\"EWMV\"] = ewmv\n\tdel vals[\"EWM\"]\n\treturn {**vals}\n\ndef gen_point(name,datum,timestamp,prefix):\n    point = {\n        \"measurement\": name,\n        \"time\": timestamp,\n        \"fields\": {\n            \"{}_Max\".format(prefix): datum['Max'],\n            \"{}_Min\".format(prefix): datum['Min'],\n            \"{}_Mean\".format(prefix): datum['Mean'],\n            \"{}_Variance\".format(prefix): datum['Variance'],\n            \"{}_EWMA\".format(prefix): datum['EWMA'],\n            #\"EWMV\": datum['EWMV'],\n            \"{}_prediction\".format(prefix): datum['prediction'],\n            \"{}_Elapsed Time\".format(prefix): datum['Elapsed Time'],\n            \"{}_Number of Records\".format(prefix): datum['Number of Records']\n        }\n    }\n    return point\n\n\ndef begin():\n\n    # define your cases\n\n\tglobal influx, FLUSH_DELTA, BATCH_SIZE, BATCH\n\tglobal bundle1, bundle2, bundlediff\n\tglobal num_of_recs\n\tglobal buffer\n\tnum_of_recs = 0\n\n\tbundle1 = StreamingCalcBundle()\n\tbundle2 = StreamingCalcBundle()\n\tbundlediff = StreamingCalcBundle()\n\n    # Add the streaming calculations we want to track\n\n\tfor bundle in [bundle1, bundle2, bundlediff]:\n\t\tbundle + StreamingCalc(update_moments, name='Moments', val=(0.0, 0.0))\n\t\tbundle + StreamingCalc(update_ewm, name='EWM', val = (0.0,0.0))\n\t\tbundle + StreamingCalc(update_max, name='Max')\n\t\tbundle + StreamingCalc(update_min, name='Min')\n\n\tFLUSH_DELTA = 1.0\n\tBATCH_SIZE = 1\n\tBATCH = []\n\tinflux = InfluxDBClient('influxdb', '8086', 'admin', 'scorefast', 'fastscore')\n\n\t# buffer inputs\n\tbuffer = {0: [], 2: []}\n\n\ndef action(predict, slot):\n\tglobal buffer\n\n\tbuffer[slot].append(predict)\n\n\twhile all([len(buffer[i]) > 0 for i in buffer]):\n\t\ttop = { i: buffer[i][0] for i in buffer }\n\t\tbuffer = { i : buffer[i][1:] for i in buffer }\n\t\tdo_update(top)\n\n\ndef do_update(top):\n\tglobal bundle1, bundle2, bundlediff\n\tglobal start_time\n\tglobal num_of_recs\n\tglobal BATCH\n\n\tx1 = top[0]\n\tx2 = top[2]\n\n\tname = \"monitors\"\n\n\ttimestamp = dt.datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ')\n\tnum_of_recs += 1\n\tif num_of_recs == 1:\n\t\tstart_time = dt.datetime.now().timestamp()\n\tcurrent_time = dt.datetime.now().timestamp()\n\telapsed_time = current_time - start_time\n\n\tbundle1.update(x=x1)\n\tbundle2.update(x=x2)\n\tbundlediff.update(x=x1 - x2)\n\n\n\treport1 = vals_to_dict(bundle1)\n\treport1['Elapsed Time'] = float(elapsed_time)\n\treport1[\"Number of Records\"] = float(num_of_recs)\n\treport1[\"prediction\"] = x1\n\n\treport2 = vals_to_dict(bundle2)\n\treport2['Elapsed Time'] = float(elapsed_time)\n\treport2['Number of Records'] = float(num_of_recs)\n\treport2['prediction'] = x2\n\n\treportdiff = vals_to_dict(bundlediff)\n\treportdiff['Elapsed Time'] = float(elapsed_time)\n\treportdiff['Number of Records'] = float(num_of_recs)\n\treportdiff['prediction'] = x1 - x2\n\n\tpoint = gen_point(name, report1, timestamp, prefix=\"Model1\")\n\tpoint.update(gen_point(name, report2, timestamp, prefix=\"Model2\"))\n\tpoint.update(gen_point(name, reportdiff, timestamp, prefix=\"Diff\"))\n\n\tBATCH.append(point)\n\tif BATCH_SIZE == len(BATCH):\n\t\tinflux.write_points(BATCH)\n\t\tsys.stdout.flush()\n\t\tBATCH = []\n\t\tsleep(FLUSH_DELTA)\n"